[
  {
    "description": "使用此工具向项目添加依赖项。依赖项应为有效的 npm 包名称。用法：\n\n package-name@version\n",
    "name": "lov-add-dependency",
    "parameters": {
      "properties": {
        "package": {
          "example": "lodash@latest",
          "type": "string"
        }
      },
      "required": [
        "package"
      ],
      "type": "object"
    }
  },
  {
    "description": "基于正则表达式的代码搜索，具有文件筛选和上下文功能。\n\n使用正则表达式模式在项目中的文件中进行搜索。\n\n参数：\n- query: 要查找的正则表达式模式（例如，\"useState\"）\n- include_pattern: 要包含的文件的 glob 语法（例如，\"src/\"）\n- exclude_pattern: 要排除的文件的 glob 语法（例如，\"/*.test.tsx\"）\n- case_sensitive: 是否区分大小写（默认为 false）\n\n提示：在正则表达式模式中使用 \\\\ 来转义特殊字符。",
    "name": "lov-search-files",
    "parameters": {
      "properties": {
        "case_sensitive": {
          "example": "false",
          "type": "boolean"
        },
        "exclude_pattern": {
          "example": "src/components/ui/",
          "type": "string"
        },
        "include_pattern": {
          "example": "src/",
          "type": "string"
        },
        "query": {
          "example": "useEffect\\(",
          "type": "string"
        }
      },
      "required": [
        "query",
        "include_pattern"
      ],
      "type": "object"
    }
  },
  {
    "description": "\n使用此工具写入文件。如果存在同名文件，则会覆盖。文件路径应相对于项目根目录。\n\n ### 重要提示：最小化代码编写\n - 优先使用 lov-line-replace 进行大多数更改，而不是重写整个文件\n - 此工具主要用于创建新文件或在 lov-line-replace 失败时作为后备\n - 在必须写入时，最大化使用 \"// ... keep existing code\" 来维护未修改的部分\n - 只编写需要更改的特定部分 - 尽可能地懒惰地编写\n \n ### 使用 \"keep existing code\"（对于大型未更改部分是强制性的）：\n - 任何超过 5 行的未更改代码块都必须使用 \"// ... keep existing code\" 注释\n - 注释必须包含确切的字符串 \"... keep existing code\" \n - 示例：\"// ... keep existing code (user interface components)\"\n - 绝不重写不需要更改的大段代码\n \n 正确使用 keep existing code 的示例：\n <lov-write file_path=\"src/App.js\">\n import React from 'react';\n import './App.css';\n \n function App() {\n // ... keep existing code (all UI components)\n \n // 仅添加新的页脚\n const Footer = () => (\n<footer>New Footer Component</footer>\n );\n \n return (\n <div className=\"App\">\n // ... keep existing code (main content)\n<Footer />\n</div>\n );\n }\n \n export default App;\n \n\n ### 并行工具使用\n - 如果你需要创建多个文件，非常重要的是一次性创建所有文件，而不是一个一个地创建，因为这样快得多\n",
    "name": "lov-write",
    "parameters": {
      "properties": {
        "content": {
          "example": "console.log('Hello, World!')",
          "type": "string"
        },
        "file_path": {
          "example": "src/main.ts",
          "type": "string"
        }
      },
      "required": [
        "file_path",
        "content"
      ],
      "type": "object"
    }
  },
  {
    "description": "基于行的搜索和替换工具\n\n使用此工具在你可访问的文件中查找和替换特定内容，使用明确的行号。这是编辑现有文件的首选和主要工具。在修改现有代码时，请始终使用此工具，而不是重写整个文件。\n\n提供以下详细信息以进行编辑：\n\t1.\tfile_path - 要修改的文件的路径\n\t2.\tsearch - 要搜索的内容（对于大段内容，使用省略号 ... 而不是完整写出）\n\t3.\tfirst_replaced_line - 搜索中第一行的行号（从 1 开始）\n\t4.\tlast_replaced_line - 搜索中最后一行的行号（从 1 开始）\n\t5.\treplace - 用于替换找到的内容的新内容\n\n该工具将验证搜索是否与指定行范围的内容匹配，然后将其替换为替换内容。\n\n重要提示：在并行多次调用此工具（对同一文件进行多次编辑）时，请始终使用你最初查看文件时的原始行号。不要根据以前的编辑调整行号。\n\n省略号用法：\n当替换超过约 6 行的代码段时，你应该在搜索中使用省略号 (...) 来减少需要指定的行数（编写更少的行更快）。\n- 包括你要替换的部分的前几行（通常是 2-3 行）\n- 在其自己的行上添加 \"...\" 以表示省略的内容\n- 包括你要替换的部分的最后几行（通常是 2-3 行）\n- 关键是在开头和结尾提供足够的唯一上下文以确保准确匹配\n- 关注唯一性而不是确切的行数 - 有时 2 行就足够了，有时你需要 4 行\n\n\n\n示例：\n要替换第 22-42 行的用户卡片组件：\n\n文件中的原始内容（第 20-45 行）：\n20: return (\n21: <div className=\"user-list\">\n22: <div className=\"user-card\">\n23: <img src={user.avatar} alt=\"User a... [截断]",
    "name": "lov-line-replace",
    "parameters": {
      "properties": {
        "file_path": {
          "example": "src/components/TaskList.tsx",
          "type": "string"
        },
        "first_replaced_line": {
          "description": "要替换的第一行行号（从 1 开始）",
          "example": "15",
          "type": "number"
        },
        "last_replaced_line": {
          "description": "要替换的最后一行行号（从 1 开始）",
          "example": "28",
          "type": "number"
        },
        "replace": {
          "description": "用于替换搜索内容的新内容（不带行号）",
          "example": " const handleTaskComplete = useCallback((taskId: string) => {\n const updatedTasks = tasks.map(task =>\n task.id === taskId \n ? { ...task, completed: !task.completed, completedAt: new Date() }\n : task\n );\n setTasks(updatedTasks);\n onTaskUpdate?.(updatedTasks);\n \n // Analytics tracking\n analytics.track('task_completed', { taskId, timestamp: Date.now() });\n }, [tasks, onTaskUpdate]);",
          "type": "string"
        },
        "search": {
          "description": "要在文件中搜索的内容（不带行号）。这应该与将被替换的现有代码匹配。",
          "example": " const handleTaskComplete = (taskId: string) => {\n setTasks(tasks.map(task =>\n...\n ));\n onTaskUpdate?.(updatedTasks);\n };",
          "type": "string"
        }
      },
      "required": [
        "file_path",
        "search",
        "first_replaced_line",
        "last_replaced_line",
        "replace"
      ],
      "type": "object"
    }
  },
  {
    "description": "从 URL 下载文件并将其保存到存储库。\n\n此工具对于以下情况很有用：\n- 从 URL 下载图像、资产或其他文件。在 src/assets 文件夹中下载图像并将其作为 ES6 模块导入。\n- 将外部资源直接保存到项目中\n- 将文件从外部源迁移到存储库\n\n文件将被下载并保存在存储库的指定路径中，以便在项目中使用。",
    "name": "lov-download-to-repo",
    "parameters": {
      "properties": {
        "source_url": {
          "description": "要下载的文件的 URL",
          "example": "https://example.com/image.png",
          "type": "string"
        },
        "target_path": {
          "description": "文件应保存在存储库中的路径（除非另有说明，否则使用 public 文件夹）",
          "example": "public/images/logo.png",
          "type": "string"
        }
      },
      "required": [
        "source_url",
        "target_path"
      ],
      "type": "object"
    }
  },
  {
    "description": "获取一个网站并将其内容（markdown、HTML、屏幕截图）临时保存到 `tmp://fetched-websites/` 中的文件中。返回创建的文件的路径和内容的预览。",
    "name": "lov-fetch-website",
    "parameters": {
      "properties": {
        "formats": {
          "description": "要返回的格式的逗号分隔列表。支持的格式：'markdown'、'html'、'screenshot'。默认为 'markdown'。",
          "example": "markdown,screenshot",
          "type": "string"
        },
        "url": {
          "example": "https://example.com",
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    }
  },
  {
    "description": "使用此工具读取文件的内容。文件路径应相对于项目根目录。你可以选择使用 lines 参数指定要读取的行范围（例如，\"1-800, 1001-1500\"）。默认情况下，如果未指定 lines，则读取前 500 行。\n\n重要指南：\n- 如果文件内容已在 <useful-context> 中提供，则不要使用此工具\n- 除非文件非常大（>500 行），否则不要指定行范围 - 依赖于显示前 500 行的默认行为\n- 仅在需要查看默认视图中未显示的大文件的特定部分时才使用行范围\n- 如果你需要读取多个文件，请并行（而不是顺序）多次调用此工具以提高效率",
    "name": "lov-view",
    "parameters": {
      "properties": {
        "file_path": {
          "example": "src/App.tsx",
          "type": "string"
        },
        "lines": {
          "example": "1-800, 1001-1500",
          "type": "string"
        }
      },
      "required": [
        "file_path"
      ],
      "type": "object"
    }
  },
  {
    "description": "使用此工具读取用户发送请求时最新的控制台日志内容。\n你可以选择提供一个搜索查询来筛选日志。如果为空，你将获得所有最新的日志。\n你可能无法看到最近没有发生的日志。\n在你构建和编写代码时，日志不会更新。所以不要期望通过再次读取日志来验证你是否修复了问题。它们将与你开始编写代码时相同。\n不要多次使用此工具，因为你每次都会得到相同的日志。",
    "name": "lov-read-console-logs",
    "parameters": {
      "properties": {
        "search": {
          "example": "error",
          "type": "string"
        }
      },
      "required": [
        "search"
      ],
      "type": "object"
    }
  },
  {
    "description": "使用此工具读取最新的网络请求内容。你可以选择提供一个搜索查询来筛选请求。如果为空，你将获得所有最新的请求。你可能无法看到最近没有发生的请求。",
    "name": "lov-read-network-requests",
    "parameters": {
      "properties": {
        "search": {
          "example": "error",
          "type": "string"
        }
      },
      "required": [
        "search"
      ],
      "type": "object"
    }
  },
  {
    "description": "使用此工具从项目中卸载一个包。",
    "name": "lov-remove-dependency",
    "parameters": {
      "properties": {
        "package": {
          "example": "lodash",
          "type": "string"
        }
      },
      "required": [
        "package"
      ],
      "type": "object"
    }
  },
  {
    "description": "你必须使用此工具来重命名文件，而不是创建新文件和删除旧文件。原始文件和新文件路径应相对于项目根目录。",
    "name": "lov-rename",
    "parameters": {
      "properties": {
        "new_file_path": {
          "example": "src/main_new2.ts",
          "type": "string"
        },
        "original_file_path": {
          "example": "src/main.ts",
          "type": "string"
        }
      },
      "required": [
        "original_file_path",
        "new_file_path"
      ],
      "type": "object"
    }
  },
  {
    "description": "使用此工具删除文件。文件路径应相对于项目根目录。",
    "name": "lov-delete",
    "parameters": {
      "properties": {
        "file_path": {
          "example": "src/App.tsx",
          "type": "string"
        }
      },
      "required": [
        "file_path"
      ],
      "type": "object"
    }
  },
  {
    "description": "根据文本提示生成图像并将其保存到指定的文件路径。使用最好的模型来处理非常重要的大图像。在选择尺寸时，请确保考虑图像在页面上的位置的宽高比。\n\n对于小图像（小于 1000 像素），请使用 flux.schnell，它速度更快且效果非常好！这应该是你的默认模型。\n当你生成大图像（如全屏图像）时，请使用 flux.dev。最大分辨率为 1920x1920。\n生成后，你需要将图像作为 ES6 导入导入到代码中。\n\n提示技巧：\n- 在提示中提及宽高比将有助于模型生成具有正确尺寸的图像。例如：\"一张 16:9 宽高比的平静海洋上的日落图像。\"\n- 在你的提示中使用“超高分辨率”后缀以最大化图像质量。\n- 如果你例如正在生成一张英雄图像，请在提示中提及它。示例：\"一张平静海洋上的日落的英雄图像。\"\n\n示例：\nimport heroImage from \"@/assets/hero-image.jpg\";\n\n重要提示：尺寸必须在 512 到 1920 像素之间，并且是 32 的倍数。",
    "name": "generate_image",
    "parameters": {
      "properties": {
        "height": {
          "description": "图像高度（最小 512，最大 1920）",
          "type": "number"
        },
        "model": {
          "description": "用于生成的模型。选项：flux.schnell（默认）、flux.dev。flux.dev 生成更高质量的图像，但速度较慢。除非你正在生成大图像（如英雄图像或全屏横幅），或者用户要求高质量，否则请始终使用 flux.schnell。",
          "type": "string"
        },
        "prompt": {
          "description": "所需图像的文本描述",
          "type": "string"
        },
        "target_path": {
          "description": "生成的图像应保存的文件路径。最好将它们放在“src/assets”文件夹中。",
          "type": "string"
        },
        "width": {
          "description": "图像宽度（最小 512，最大 1920）",
          "type": "number"
        }
      },
      "required": [
        "prompt",
        "target_path"
      ],
      "type": "object"
    }
  },
  {
    "description": "使用 Flux Kontext Pro 模型根据文本提示编辑或合并现有图像。\n此工具可以处理单个或多个图像：\n- 单个图像：根据你的提示应用 AI 驱动的编辑\n- 多个图像：根据你的提示合并/组合图像\n\nstrength 参数控制图像变化的程度（0.0-1.0）。\n较低的值会保留更多原始图像的结构。\n\n单个图像的示例提示：\n- \"让它下雨\"\n- \"更改为日落光照\"\n- \"添加雪\"\n- \"让它更丰富多彩\"\n\n多个图像的示例提示：\n- \"无缝融合这两个景观\"\n- \"将第一张图像的前景与第二张图像的背景相结合\"\n- \"将这些肖像合并成一张合影\"\n- \"用这些图像创建一张拼贴画\"\n\n\n此工具非常适合对象或角色的一致性。你可以重复使用同一张图像并将其放置在不同的场景中。",
    "name": "edit_image",
    "parameters": {
      "properties": {
        "image_paths": {
          "description": "现有图像文件的路径数组。对于单个图像编辑，提供一个路径。对于合并/组合多个图像，提供多个路径。",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "prompt": {
          "description": "如何编辑/合并图像的文本描述。对于多个图像，描述它们应如何组合。",
          "type": "string"
        },
        "strength": {
          "description": "图像变化的程度（0.0-1.0）。较低的值会保留更多原始图像。",
          "type": "number"
        },
        "target_path": {
          "description": "编辑/合并后的图像应保存的文件路径。",
          "type": "string"
        }
      },
      "required": [
        "image_paths",
        "prompt",
        "target_path"
      ],
      "type": "object"
    }
  },
  {
    "description": "执行网络搜索并返回带有文本内容的相关结果。\n使用此工具查找当前信息、文档或任何基于网络的内容。\n你也可以选择要求返回链接或图像链接。\n你还可以选择指定要返回的搜索结果的类别。\n有效的类别是（你必须使用确切的字符串）：\n- \"新闻\"\n- \"领英个人资料\"\n- \"pdf\"\n- \"github\"\n- \"个人网站\"\n- \"财务报告\"\n\n没有其他类别。如果你不指定类别，搜索将是通用的。\n\n何时使用？\n- 当你对用户所问的内容没有任何信息时。\n- 当你需要查找当前信息、文档或任何基于网络的内容时。\n- 当你需要查找特定的技术信息等时。\n- 当你需要查找有关特定个人、公司或组织的信息时。\n- 当你需要查找有关特定事件、产品或服务的信息时。\n\n当你需要查找有关特定个人、公司或组织的真实（非 AI 生成）图像时。",
    "name": "web_search",
    "parameters": {
      "properties": {
        "category": {
          "description": "要返回的搜索结果的类别",
          "type": "string"
        },
        "imageLinks": {
          "description": "为每个结果返回的图像链接数",
          "type": "number"
        },
        "links": {
          "description": "为每个结果返回的链接数",
          "type": "number"
        },
        "numResults": {
          "description": "要返回的搜索结果数（默认为 5）",
          "type": "number"
        },
        "query": {
          "description": "搜索查询",
          "type": "string"
        }
      },
      "required": [
        "query"
      ],
      "type": "object"
    }
  },
  {
    "description": "读取项目生产版本在两个日期之间的分析数据，具有给定的粒度。粒度可以是“每小时”或“每天”。开始和结束日期必须采用 YYYY-MM-DD 格式。\n开始和结束日期应采用 RFC3339 格式或仅日期格式 (YYYY-MM-DD)。\n\n何时使用此工具：\n- 当用户询问其应用程序的使用情况时\n- 当用户想要改进其生产应用程序时",
    "name": "read_project_analytics",
    "parameters": {
      "properties": {
        "enddate": {
          "type": "object"
        },
        "granularity": {
          "type": "string"
        },
        "startdate": {
          "type": "object"
        }
      },
      "required": [
        "startdate",
        "enddate",
        "granularity"
      ],
      "type": "object"
    }
  }
]