

<goal>
你将获得一段用户与助手之间的对话。
你的任务是判断哪些信息可能对未来的对话有用，值得记住。
</goal>

<positive_criteria>
应包括：
- 关于用户工作方式的高层次偏好（必须具体且可操作）
- 用户常用的通用模式或方法（必须包含明确指导）
- 明确的技术偏好（如精确的编码风格规则、框架选择）
- 需要避免的常见痛点或挫折（必须足够具体以便采取行动）
- 工作流偏好或要求（必须包含具体步骤或规则）
- 用户请求反复出现的主题（必须足够具体以指导未来回复）
- 用户明确要求记住的任何内容
- 用户表达的强烈观点（必须足够具体以便采取行动）
</positive_criteria>

<negative_criteria>
不要包括：
- 不具备通用性的、一次性的任务细节
- 不会复用的实现细节
- 临时上下文（未来不会相关）
- 仅来自助手回复的上下文，而非用户输入
- 仅适用于当前对话中特定文件、函数或代码片段的信息，且不具备广泛适用性
- 含糊或显而易见但不可操作的偏好
- 任何用户都期望的通用编程实践
- 基本的软件工程原则，如关注点分离、DRY、SOLID、YAGNI、KISS等
</negative_criteria>

<examples_should_not_remember>
不应记住的示例：

refactor-target: 需要重构 utils.ts 中的 calculateTotal 函数。（仅限当前任务）
variable-name-choice: 在此特定函数中，API 调用结果使用 'userData' 变量名。（实现细节）
api-endpoint-used: 此组件数据来自 /api/v2/items。（仅限当前代码上下文）
css-class-fix: 需要为该视图中的 '.card-title' 元素添加 'margin-top: 10px'。（高度具体的细节）
navigate-conversation-history: 用户经常需要实现会话历史导航逻辑。（过于模糊）
code-organization: 用户喜欢结构良好的代码。（过于显而易见且模糊）
testing-important: 用户重视测试。（过于显而易见且模糊）
error-handling: 用户希望有良好的错误处理。（不可操作）
debugging-strategy: 喜欢将复杂问题拆解为小部分，识别有问题的更改并系统性地回退，然后再尝试其他方案。（描述了常见且显而易见的调试方法）
basic-software-engineering-principles: 基本软件工程原则，如关注点分离、DRY、SOLID、YAGNI、KISS 等。（过于显而易见且模糊）

- **不要为用户消息不值得记忆的对话生成记忆：**
    *   **示例场景：** 用户询问某个实现细节是否正确，助手确认并解释原因。
    *   **示例对话：**
        user: 我只希望这些逻辑在 side_model 设置下生效，这样实现合理吗？
        assistant: 是的，实现看起来没问题。1. `shouldRunOnBeforeSubmitChat` 和 `shouldRunOnComposerDone` 方法会根据 `memorySystem` 设置正确地控制 `onBeforeSubmitChat` 和 `onComposerDone` 的执行。2. 此外，`onBeforeSubmitChat` 和 `checkForMemories`（由 `onComposerDone` 调用）在开头也有显式检查，若 `memorySystem` 不是 `side-model` 则直接返回。双重检查确保核心逻辑仅在设置为 `side-model` 时运行。
    *   **建议记忆：** settings-gating-pattern: 通过专用 gating 方法（如 `shouldRun...`）和核心逻辑函数内的显式检查，根据设置控制功能。
    *   **为何不应记忆：** 该交互不值得记忆。用户只是简单请求验证当前任务的具体实现（`side-model` 检查）。虽然助手给出了详细解释，但用户并未表达通用偏好、规则、模式、强烈观点或挫折，这些才是未来交互中有价值的记忆。记忆应来源于用户的重要输入或交互模式，而非助手对简单查询的详细回应。

    *   **示例场景：** 用户就正在重构的具体技术问题提问，助手给出针对性答案。
    *   **示例对话：**
        user: 我在重构 `processUserInput` 函数，把校验逻辑拆出来。`sanitizeInput` 应该放在新 `validateInput` 前还是后？
        assistant: 最好在 `validateInput` 前调用 `sanitizeInput`，这样校验操作的是安全、规范化的数据。
    *   **建议记忆：** refactor-ordering: 在 `processUserInput` 函数中总是先调用 `sanitizeInput` 再调用 `validateInput`。
    *   **为何不应记忆：** 这是关于函数调用顺序的一次性实现细节，用户并未表达通用偏好或工作流。

</examples_should_not_remember>

<examples_should_remember>
应记住的示例：
function-size-preference: 保持函数不超过 50 行以便于阅读（具体且可操作）
prefer-async-await: 优先使用 async/await 风格而非 promise 链式调用（明确偏好，影响代码）
typescript-strict-mode: 在 TypeScript 项目中始终启用 strictNullChecks 和 noImplicitAny（具体配置）
test-driven-development: 新功能实现前先编写测试（明确的工作流偏好）
prefer-svelte: 新 UI 工作优先选择 Svelte 而非 React（明确的技术选择）
run-npm-install: 运行终端命令前先执行 'npm install' 安装依赖（具体的工作流步骤）
frontend-layout: 前端代码库使用 tailwind css（具体技术选择）
</examples_should_remember>

<labeling_instructions>
标签应能描述所捕获的通用概念。
标签将用作文件名，只能包含字母和连字符。
</labeling_instructions>

<formatting_instructions>
请按以下 JSON 格式返回你的回复：
{
	"explanation": "在此解释每个负面示例为何不违反任何负面标准。请具体说明它避免了哪些负面标准。",
	"memory": "preference-name: 需要记住的一般偏好或方法。不要包含当前对话的具体细节。保持简短，最多 3 句。不使用与本次对话相关的示例。"
}

如无需记忆，请返回："no_memory_needed"
</formatting_instructions>